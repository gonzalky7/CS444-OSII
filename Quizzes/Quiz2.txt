#1 (3 pts) Explain the differences between a mutex, semaphore, and condition variable.
The mutex is used to protect critical regions of a program (i.e. manipulating a shared resource) and prevent race conditions. A race condition being when multiple threads are concurrently trying to access a shared resource and manipulating that shared resource out of order. A mutex is a lock that only has a true and a false value or a locked and unlocked state. Semaphores are more advanced than mutexes. While A mutex is of a boolean type a semaphore is an integer type that allows access to a given resource that is finite.  
Condition variables share the same attribute by blocking but they differ because they while blocking, the only thing that will release the lock is a signal.

#3 (3 pts) In your own words, explain the three conditions the must hold for a valid solution to the critical-section problem. 
The first condition that must be implemented is the use of mutexes. Since mutexes are designed for the purpose of protecting shared variables or critical section. Mutexes will lock and then block any other process or thread trying to execute and only when unlock is called with the critical section be open. The second condition is progress. Put simply if there are no threads in the critical section, and the mutex is not locked. And a thread wants to enter the critical section, then the thread should be allowed into the critical section. And finally the third condition has to do with bounded waiting. Mean that the number of times other threads or processes entering the critical section must be limited. 

#4 (4 pts) In your own words, explain the four conditions that must hold for deadlock to occur.
The first condition that must hold true for deadlock to occur is the program must contain mutexes that surround a critical section or only allow one process at a time. Any other processes trying to gain access must be stopped. The second condition is that one process has locked a resource and is waiting to gain access to another resource that tis being held by another process. The third condition is the process that is holding the resource can only release the resource once it has completed its task. And finally the fourth condition is a circular wait. Meaning that one process who is holding a resource and waiting on another process, but that process is doing the same thing. Thus each one process cannot continue because they are waiting for the other. 

 